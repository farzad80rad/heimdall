// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: cargo.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CargoServiceClient is the client API for CargoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CargoServiceClient interface {
	SendCargo(ctx context.Context, in *RequestSendCargo, opts ...grpc.CallOption) (*ResponseSendCargo, error)
	ReceivedCargo(ctx context.Context, in *RequestReceivedCargo, opts ...grpc.CallOption) (*ResponseReceivedCargo, error)
}

type cargoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCargoServiceClient(cc grpc.ClientConnInterface) CargoServiceClient {
	return &cargoServiceClient{cc}
}

func (c *cargoServiceClient) SendCargo(ctx context.Context, in *RequestSendCargo, opts ...grpc.CallOption) (*ResponseSendCargo, error) {
	out := new(ResponseSendCargo)
	err := c.cc.Invoke(ctx, "/backend.cargo.v1.CargoService/SendCargo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoServiceClient) ReceivedCargo(ctx context.Context, in *RequestReceivedCargo, opts ...grpc.CallOption) (*ResponseReceivedCargo, error) {
	out := new(ResponseReceivedCargo)
	err := c.cc.Invoke(ctx, "/backend.cargo.v1.CargoService/ReceivedCargo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CargoServiceServer is the server API for CargoService service.
// All implementations must embed UnimplementedCargoServiceServer
// for forward compatibility
type CargoServiceServer interface {
	SendCargo(context.Context, *RequestSendCargo) (*ResponseSendCargo, error)
	ReceivedCargo(context.Context, *RequestReceivedCargo) (*ResponseReceivedCargo, error)
	mustEmbedUnimplementedCargoServiceServer()
}

// UnimplementedCargoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCargoServiceServer struct {
}

func (UnimplementedCargoServiceServer) SendCargo(context.Context, *RequestSendCargo) (*ResponseSendCargo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCargo not implemented")
}
func (UnimplementedCargoServiceServer) ReceivedCargo(context.Context, *RequestReceivedCargo) (*ResponseReceivedCargo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivedCargo not implemented")
}
func (UnimplementedCargoServiceServer) mustEmbedUnimplementedCargoServiceServer() {}

// UnsafeCargoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CargoServiceServer will
// result in compilation errors.
type UnsafeCargoServiceServer interface {
	mustEmbedUnimplementedCargoServiceServer()
}

func RegisterCargoServiceServer(s grpc.ServiceRegistrar, srv CargoServiceServer) {
	s.RegisterService(&CargoService_ServiceDesc, srv)
}

func _CargoService_SendCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendCargo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).SendCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.cargo.v1.CargoService/SendCargo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).SendCargo(ctx, req.(*RequestSendCargo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CargoService_ReceivedCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReceivedCargo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).ReceivedCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.cargo.v1.CargoService/ReceivedCargo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).ReceivedCargo(ctx, req.(*RequestReceivedCargo))
	}
	return interceptor(ctx, in, info, handler)
}

// CargoService_ServiceDesc is the grpc.ServiceDesc for CargoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CargoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.cargo.v1.CargoService",
	HandlerType: (*CargoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCargo",
			Handler:    _CargoService_SendCargo_Handler,
		},
		{
			MethodName: "ReceivedCargo",
			Handler:    _CargoService_ReceivedCargo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cargo.proto",
}
